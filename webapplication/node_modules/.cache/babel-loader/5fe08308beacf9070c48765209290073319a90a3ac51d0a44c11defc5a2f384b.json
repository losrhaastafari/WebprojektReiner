{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\simon\\\\Documents\\\\GitHub\\\\WebprojektReiner\\\\webapplication\\\\src\\\\customers.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Customers = () => {\n  _s();\n  // Hier werden die Kunden-Daten gespeichert\n  const [customers, setCustomers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Hole die Daten von der API, wenn die Komponente geladen wird\n  useEffect(() => {\n    fetch('http://localhost:8080/Customer/getCustomers').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json(); // Umwandeln der Antwort in JSON\n    }).then(data => {\n      setCustomers(data); // Kunden-Daten setzen\n      setLoading(false); // Ladevorgang beenden\n    }).catch(error => {\n      setError(error.message); // Fehler setzen\n      setLoading(false); // Ladevorgang beenden\n    });\n  }, []); // Der leere Array bedeutet, dass useEffect nur einmal ausgeführt wird, wenn die Komponente geladen wird\n\n  // Zeige den Lade-Status, Fehler oder die Kunden an\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Kunden aus der Datenbank\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: customers.map(customer => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [customer.name, \" \"]\n      }, customer.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Customers, \"opa7S2/N4Bp1KtfdUvYEskW86Mc=\");\n_c = Customers;\nexport default Customers;\nvar _c;\n$RefreshReg$(_c, \"Customers\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Customers","_s","customers","setCustomers","loading","setLoading","error","setError","fetch","then","response","ok","Error","json","data","catch","message","children","fileName","_jsxFileName","lineNumber","columnNumber","map","customer","name","id","_c","$RefreshReg$"],"sources":["C:/Users/simon/Documents/GitHub/WebprojektReiner/webapplication/src/customers.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Customers = () => {\r\n  // Hier werden die Kunden-Daten gespeichert\r\n  const [customers, setCustomers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Hole die Daten von der API, wenn die Komponente geladen wird\r\n  useEffect(() => {\r\n    fetch('http://localhost:8080/Customer/getCustomers')\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        return response.json(); // Umwandeln der Antwort in JSON\r\n      })\r\n      .then((data) => {\r\n        setCustomers(data); // Kunden-Daten setzen\r\n        setLoading(false); // Ladevorgang beenden\r\n      })\r\n      .catch((error) => {\r\n        setError(error.message); // Fehler setzen\r\n        setLoading(false); // Ladevorgang beenden\r\n      });\r\n  }, []); // Der leere Array bedeutet, dass useEffect nur einmal ausgeführt wird, wenn die Komponente geladen wird\r\n\r\n  // Zeige den Lade-Status, Fehler oder die Kunden an\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Kunden aus der Datenbank</h1>\r\n      <ul>\r\n        {customers.map((customer) => (\r\n          <li key={customer.id}>\r\n            {customer.name} {/* Hier kannst du weitere Eigenschaften der Kunden anzeigen */}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Customers;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACdW,KAAK,CAAC,6CAA6C,CAAC,CACjDC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;MACdX,YAAY,CAACW,IAAI,CAAC,CAAC,CAAC;MACpBT,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,CACDU,KAAK,CAAET,KAAK,IAAK;MAChBC,QAAQ,CAACD,KAAK,CAACU,OAAO,CAAC,CAAC,CAAC;MACzBX,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,IAAID,OAAO,EAAE;IACX,oBAAOL,OAAA;MAAAkB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,IAAIf,KAAK,EAAE;IACT,oBAAOP,OAAA;MAAAkB,QAAA,GAAK,SAAO,EAACX,KAAK;IAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAClC;EAEA,oBACEtB,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAAkB,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjCtB,OAAA;MAAAkB,QAAA,EACGf,SAAS,CAACoB,GAAG,CAAEC,QAAQ,iBACtBxB,OAAA;QAAAkB,QAAA,GACGM,QAAQ,CAACC,IAAI,EAAC,GAAC;MAAA,GADTD,QAAQ,CAACE,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEhB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACpB,EAAA,CA9CID,SAAS;AAAA0B,EAAA,GAAT1B,SAAS;AAgDf,eAAeA,SAAS;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}